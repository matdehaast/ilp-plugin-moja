{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AACA,+BAA8B;AAE9B,iDAAuD;AACvD,mCAAkC;AAClC,0CAAyC;AACzC,+BAA8B;AAC9B,2CAMmB;AACnB,MAAM,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,iBAAiB,CAAC,CAAA;AAKtD,MAAM,aAAa,GAAG,MAAM,CAAC,mFAAmF,CAAC,CAAA;AAEjH,MAAM,+BAA+B,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;AACxD,MAAM,6BAA6B,GAAG,MAAM,CAAC,IAAI,CAAC,8CAA8C,EAAE,QAAQ,CAAC,CAAA;AAE3G,IAAK,UAMJ;AAND,WAAK,UAAU;IACb,iDAAW,CAAA;IACX,uDAAc,CAAA;IACd,qDAAa,CAAA;IACb,2DAAgB,CAAA;IAChB,6DAAiB,CAAA;AACnB,CAAC,EANI,UAAU,KAAV,UAAU,QAMd;AAED,MAAM,eAAe,GAAG,KAAK,CAAA;AAE7B,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,qDAAQ,CAAA;IACR,+DAAa,CAAA;IACb,+CAAK,CAAA;IACL,yDAAU,CAAA;AACZ,CAAC,EALW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAKtB;AAgCD,MAAqB,cAAe,SAAQ,6BAAa;IAqBvD,YAAa,OAAwC,EAAE,OAAyC;QAC9F,KAAK,EAAE,CAAA;QAfD,gBAAW,GAAe,UAAU,CAAC,OAAO,CAAA;QAiBlD,OAAO,GAAG,OAAO,IAAI,EAAE,CAAA;QACvB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,IAAI,KAAK,CAAA;QAChC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAA;QAChF,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAA;QACpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;QACvD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,kBAAkB,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,CAAW,CAAC,EAAE,CAAC,CAAC,CAAA;QAE/J,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAA;QACpC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAA;QAC3D,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAA;QAClE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAA;QACvE,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAA;QACvC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;QAEnB,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,SAAS,CAAC,SAAS,CAAA;QACpD,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,SAAS,CAAC,MAAM,CAAA;IAChD,CAAC;IAED,KAAK,CAAC,OAAO;QACX,IAAI,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,OAAO,EAAE;YACzC,OAAM;SACP;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,UAAU,CAAA;QASxC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,GAAG,EAAE,CAAC,OAAY,EAAE,QAAa,EAAE,EAAE;YACnE,QAAQ,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;QAGF,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QAC1F,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,wBAAwB,EAAE,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QACpG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,8BAA8B,EAAE,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QAG/G,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,SAAS,EAAE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QACpF,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,kBAAkB,EAAE,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QAE3F,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAA;QAEnD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,yCAAyC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,UAAU,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;QAEtH,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,aAAa,CAAA;QAC3C,IAAI,CAAC,YAAY,EAAE,CAAA;IACrB,CAAC;IASD,KAAK,CAAC,UAAU;QACd,IAAI,CAAC,eAAe,EAAE,CAAA;QAEtB,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;SACpB;IACH,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,WAAW,KAAK,UAAU,CAAC,SAAS,CAAA;IAClD,CAAC;IAED,KAAK,CAAC,2BAA2B,CAAE,OAAwB,EAAE,QAA0B;QACrF,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;QAC/E,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;QACvC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAA;IACnC,CAAC;IAMO,KAAK,CAAC,0BAA0B,CAAE,OAAwB,EAAE,QAA0B;QAC5F,IAAI;YACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;YAC7J,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,IAAI,CAAA;YAElE,MAAM,WAAW,GAAG;gBAClB,WAAW,EAAE,WAAW,CAAC,QAAQ;gBACjC,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,OAAO,CAAC,IAAI;gBACzB,cAAc,EAAE,OAAO,CAAC,OAAO;aAChC,CAAA;YAED,MAAM,UAAU,GAAG;gBACjB,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,SAAS,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC;gBAC/B,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC;gBAC9I,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;gBAC9C,kBAAkB,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC;aACvC,CAAA;YACf,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;YAE1B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACtB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAA;gBAC3C,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAA;aAC/C;YAED,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,gCAAmB,CAAC,UAAU,CAAC,CAAC,CAAA;gBACvE,MAAM,QAAQ,GAAG,gCAAmB,CAAC,MAAM,CAAC,CAAA;gBAC5C,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;gBAE1D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,0BAA0B,IAAI,CAAC,iBAAiB,mBAAmB,UAAU,EAAE,CAAC,CAAA;gBAC/F,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,cAAc,EAAE,EAAE,0BAA0B,EAAE,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,CAAA;gBACjI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,GAAG,aAAa,GAAG,UAAU,EAAE,aAAa,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,CAAC,CAAA;aAC7G;YAAC,OAAO,GAAG,EAAE;gBAEZ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,8CAA8C,UAAU,cAAc,IAAI,CAAC,iBAAiB,GAAG,aAAa,GAAG,UAAU,EAAE,EAAE,GAAG,CAAC,CAAA;aACjJ;SACF;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;YAC7E,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;SACtC;IACH,CAAC;IAMO,KAAK,CAAC,yBAAyB,CAAE,OAAwB,EAAE,QAA0B;QAC3F,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,UAAU,CAAA;QAC5C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iDAAiD,UAAU,EAAE,CAAC,CAAA;QAC7E,MAAM,WAAW,GAAG,OAAO,CAAC,IAAI,CAAA;QAEhC,MAAM,WAAW,GAAG;YAClB,WAAW,EAAE,WAAW,CAAC,QAAQ;YACjC,QAAQ,EAAE,UAAU;YACpB,WAAW;YACX,cAAc,EAAE;gBACd,cAAc,EAAE,6DAA6D;gBAC7E,0BAA0B,EAAE,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC;gBACvE,eAAe,EAAE,IAAI,CAAC,UAAU;gBAChC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC;aAChC;SACF,CAAA;QAED,MAAM,UAAU,GAAG;YACjB,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC;YAC1D,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;SACjC,CAAA;QAEf,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,UAAU,EAAE,UAAU,CAAC,CAAA;QACjD,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;IAC5B,CAAC;IAOO,KAAK,CAAC,8BAA8B,CAAE,OAAwB,EAAE,QAA0B;QAChG,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,UAAU,CAAA;QAC5C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mDAAmD,UAAU,EAAE,CAAC,CAAA;QAE/E,MAAM,WAAW,GAAG;YAClB,WAAW,EAAE,WAAW,CAAC,aAAa;YACtC,QAAQ,EAAE,UAAU;YACpB,WAAW,EAAE,OAAO,CAAC,IAAI;YACzB,cAAc,EAAE;gBACd,cAAc,EAAE,6DAA6D;gBAC7E,0BAA0B,EAAE,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC;gBACvE,eAAe,EAAE,IAAI,CAAC,UAAU;gBAChC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC;aAChC;SACF,CAAA;QAED,MAAM,UAAU,GAAG;YACjB,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC;YACtE,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;SACjC,CAAA;QAEf,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,UAAU,EAAE,UAAU,CAAC,CAAA;QACjD,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;IAC5B,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAE,OAAwB,EAAE,QAA0B;QACjF,IAAI;YACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oCAAoC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YAC3H,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,IAAI,CAAA;YAExC,MAAM,WAAW,GAAG;gBAClB,WAAW,EAAE,WAAW,CAAC,KAAK;gBAC9B,QAAQ,EAAE,OAAO;gBACjB,WAAW,EAAE,OAAO,CAAC,IAAI;gBACzB,cAAc,EAAE,OAAO,CAAC,OAAO;aAChC,CAAA;YAED,MAAM,UAAU,GAAG;gBACjB,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;gBACjC,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC;gBAC9I,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;gBAC9C,kBAAkB,EAAE,6BAA6B;aACpC,CAAA;YACf,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;YAE1B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACtB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAA;gBAC3C,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAA;aAC/C;YAED,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,gCAAmB,CAAC,UAAU,CAAC,CAAC,CAAA;gBACvE,MAAM,QAAQ,GAAG,gCAAmB,CAAC,MAAM,CAAC,CAAA;gBAC5C,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;gBAE1D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,0BAA0B,IAAI,CAAC,cAAc,mBAAmB,OAAO,EAAE,CAAC,CAAA;gBACzF,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,cAAc,EAAE,EAAE,0BAA0B,EAAE,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,CAAA;gBACjI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,GAAG,UAAU,GAAG,OAAO,EAAE,aAAa,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,CAAC,CAAA;aACpG;YAAC,OAAO,GAAG,EAAE;gBAEZ,MAAM,MAAM,GAAG,GAAG,CAAA;gBAClB,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAA;aAC3B;SAEF;QAAC,OAAO,GAAG,EAAE;YACZ,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;SACtC;IACH,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAE,OAAwB,EAAE,QAA0B;QAChF,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAA;QACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,2CAA2C,OAAO,EAAE,CAAC,CAAA;QAEpE,MAAM,WAAW,GAAG;YAClB,WAAW,EAAE,WAAW,CAAC,KAAK;YAC9B,QAAQ,EAAE,OAAO;YACjB,WAAW,EAAE,OAAO,CAAC,IAAI;YACzB,cAAc,EAAE;gBACd,cAAc,EAAE,0DAA0D;gBAC1E,0BAA0B,EAAE,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC;gBACvE,eAAe,EAAE,IAAI,CAAC,UAAU;gBAChC,MAAM,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE;aACnC;SACF,CAAA;QAED,MAAM,UAAU,GAAG;YACjB,WAAW,EAAE,+BAA+B;YAC5C,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;SACjC,CAAA;QAEf,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,OAAO,EAAE,UAAU,CAAC,CAAA;QAC9C,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;IAC5B,CAAC;IAKD,KAAK,CAAC,QAAQ,CAAE,MAAc;QAC5B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,kCAAqB,CAAC,MAAM,CAAC,CAAC,CAAA;QAChE,OAAO,8BAAiB,CAAC,QAAQ,CAAC,CAAA;IACpC,CAAC;IAED,oBAAoB,CAAE,OAAqB;QACzC,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAA;SACxD;QAID,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAA;SACrD;QAED,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAA;QAC5C,IAAI,CAAC,aAAa,GAAG,OAAO,CAAA;IAC9B,CAAC;IAED,sBAAsB;QACpB,IAAI,CAAC,aAAa,GAAG,SAAS,CAAA;IAChC,CAAC;IAKD,KAAK,CAAC,SAAS,CAAE,MAAc;IAE/B,CAAC;IAOD,SAAS;QACP,IAAI;YACF,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;SACjC;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,OAAO,GAAG,CAAC,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;YAChF,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,4BAA4B,EAAE,SAAS,EAAE,OAAO,CAAC,CAAA;SAClE;IACH,CAAC;IAED,mBAAmB,CAAE,OAAoB;QACvC,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAA;SACxD;QAID,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAA;SACrD;QAED,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAA;QAC3C,IAAI,CAAC,YAAY,GAAG,OAAO,CAAA;IAC7B,CAAC;IAED,qBAAqB;QACnB,IAAI,CAAC,YAAY,GAAG,SAAS,CAAA;IAC/B,CAAC;IAKS,KAAK,CAAC,KAAK,CAAE,MAAkB;QAEvC,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAA;QAE5D,IAAI,QAAkB,CAAA;QACtB,MAAM,QAAQ,GAAG,IAAI,OAAO,CAAW,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACzD,QAAQ,GAAG,CAAC,MAAgB,EAAE,EAAE,CAAC,sBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;YACrF,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,QAAQ,EAAE,QAAQ,CAAC,CAAA;QAC/C,CAAC,CAAC,CAAA;QAEF,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAA;QAClC,OAAO,QAAQ,CAAA;IACjB,CAAC;IAKS,KAAK,CAAC,eAAe,CAAE,MAAkB,EAAE,SAAkB;QAErE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,4CAA4C,SAAS,WAAW,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QAGzG,IAAI;YACF,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;YACrD,IAAI,eAAe,GAAG,UAAU,CAAC,WAAW,CAAA;YAC5C,IAAI,OAAO,GAAG,IAAI,CAAA;YAClB,QAAQ,UAAU,CAAC,WAAW,EAAE;gBAC9B,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;oBACxB,eAAe,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAA;oBAC1C,eAAe,CAAC,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAA;oBAC7C,OAAO,GAAG;wBACR,0BAA0B,EAAE,MAAM,CAAC,WAAW;wBAC9C,eAAe,EAAE,IAAI,CAAC,UAAU;wBAChC,QAAQ,EAAE,6DAA6D;wBACvE,cAAc,EAAE,6DAA6D;wBAC7E,MAAM,EAAE,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC;qBAC1C,CAAA;oBAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,+BAA+B,EAAE,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAC,mBAAmB,EAAE,eAAe,CAAC,CAAA;oBACvH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,YAAY,EAAE,eAAe,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;oBAClH,MAAK;gBACP,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC;oBACrB,eAAe,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAA;oBAC1C,eAAe,CAAC,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAA;oBAC7C,OAAO,GAAG;wBACR,0BAA0B,EAAE,MAAM,CAAC,WAAW;wBAC9C,eAAe,EAAE,IAAI,CAAC,UAAU;wBAChC,QAAQ,EAAE,0DAA0D;wBACpE,cAAc,EAAE,0DAA0D;wBAC1E,MAAM,EAAE,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC;qBAC1C,CAAA;oBAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,4BAA4B,EAAE,IAAI,CAAC,cAAc,EAAE,SAAS,EAAE,OAAO,EAAC,mBAAmB,EAAE,eAAe,CAAC,CAAA;oBAC1H,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,SAAS,EAAE,eAAe,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;oBACrH,MAAK;gBACP;oBACE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,qCAAqC,EAAE,UAAU,CAAC,WAAW,CAAC,CAAA;aACjF;SAEF;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,yCAAyC,GAAG,CAAC,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;SAC1G;IACH,CAAC;IAMO,eAAe;QACrB,IAAI,IAAI,CAAC,WAAW,KAAK,UAAU,CAAC,YAAY,EAAE;YAChD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,YAAY,CAAA;YAC1C,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;SACxB;IACH,CAAC;IAQO,YAAY;QAClB,IAAI,IAAI,CAAC,WAAW,KAAK,UAAU,CAAC,UAAU,EAAE;YAC9C,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;SACjC;aAAM,IAAI,IAAI,CAAC,WAAW,KAAK,UAAU,CAAC,aAAa,IAAI,IAAI,CAAC,WAAW,KAAK,UAAU,CAAC,YAAY,EAAE;YACxG,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,SAAS,CAAA;YACvC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;SACrB;IACH,CAAC;;AArba,sBAAO,GAAG,CAAC,CAAA;AAD3B,iCAubC","sourcesContent":["import * as crypto from 'crypto'\nimport * as Debug from 'debug'\nimport * as Http from 'http'\nimport { EventEmitter2, Listener } from 'eventemitter2'\nimport * as express from 'express'\nimport * as bodyParser from 'body-parser'\nimport * as axios from 'axios'\nimport {\n  isFulfill,\n  IlpPrepare,\n  serializeIlpPrepare,\n  IlpReply,\n  deserializeIlpPrepare, serializeIlpReply, IlpFulfill, deserializeIlpReply\n} from 'ilp-packet'\nconst debug = require('ilp-logger')('ilp-plugin-moja')\n\ntype DataHandler = (data: Buffer) => Promise<Buffer>\ntype MoneyHandler = (amount: string) => Promise<void>\n\nconst headerPattern = RegExp('^application\\\\/vnd.interoperability.(transfers|quotes|parties)\\\\+json;version=1.0')\n\nconst MOJA_QUOTE_PROTOCOL_FULFILLMENT = Buffer.alloc(32)\nconst MOJA_QUOTE_PROTOCOL_CONDITION = Buffer.from('Zmh6rfhivXdsj8GLjp+OIAiXFIVu4jOzkCpZHQ1fKSU=', 'base64')\n\nenum ReadyState {\n  INITIAL = 0,\n  CONNECTING = 1,\n  CONNECTED = 2,\n  DISCONNECTED = 3,\n  READY_TO_EMIT = 4\n}\n\nconst DEFAULT_TIMEOUT = 35000\n\nexport enum MessageType {\n  transfer,\n  transferError,\n  quote,\n  quoteError\n}\n\n/**\n * Constructor options for a BTP plugin. The 'Instance Management' section of\n * the RFC-24 indicates that every ledger plugin accepts an opts object, and\n * an optional api denoted as 'PluginServices.' This is the opts object.\n */\nexport interface IlpPluginHttpConstructorOptions {\n  ilpAddress: string,\n  listener: {\n    port: number,\n    baseAddress: string,\n    host: string\n  }\n  server: {\n    endpoint: string\n  },\n  endpoints: {\n    transfers: string,\n    quotes: string\n  }\n}\n\n/**\n * This is the optional api, or 'PluginServices' interface, that is passed\n * into the ledger plugin constructor as defined in RFC-24. In this case\n * the api exposes 1 module.\n */\nexport interface IlpPluginHttpConstructorModules {\n  log?: any\n}\n\nexport default class MojaHttpPlugin extends EventEmitter2 {\n  public static version = 2\n\n  private ilpAddress: string\n\n  protected _dataHandler?: DataHandler\n  protected _moneyHandler?: MoneyHandler\n  private _readyState: ReadyState = ReadyState.INITIAL\n  protected _log: any\n\n  private app: express.Application\n  private server: Http.Server\n  private host: string\n  private port: number\n  private baseAddress: string\n  private endpoint: string\n  private client: any\n\n  private transfersEndpoint: string\n  private quotesEndpoint: string\n\n  constructor (options: IlpPluginHttpConstructorOptions, modules?: IlpPluginHttpConstructorModules) {\n    super()\n\n    modules = modules || {}\n    this._log = modules.log || debug\n    this._log.trace = this._log.trace || Debug(this._log.debug.namespace + ':trace')\n    this.app = express()\n    this.app.use(bodyParser.urlencoded({ extended: true }))\n    this.app.use(bodyParser.json({ type: req => req.headers['content-type'] === 'application/json' || headerPattern.test(req.headers['content-type'] as string) }))\n\n    this.ilpAddress = options.ilpAddress\n    this.port = options.listener ? options.listener.port : 1080\n    this.host = options.listener ? options.listener.host : 'localhost'\n    this.baseAddress = options.listener ? options.listener.baseAddress : ''\n    this.endpoint = options.server.endpoint\n    this.client = axios\n\n    this.transfersEndpoint = options.endpoints.transfers\n    this.quotesEndpoint = options.endpoints.quotes\n  }\n\n  async connect () {\n    if (this._readyState > ReadyState.INITIAL) {\n      return\n    }\n\n    this._readyState = ReadyState.CONNECTING\n\n    /**\n     * Setup different handlers for mojaloop\n     * 1. Transfer\n     * 2. Quote\n     * 3. Parties\n     * 4. Health\n     */\n    this.app.get(this.baseAddress + '/', (request: any, response: any) => {\n      response.send('Hello from Moja CNP!')\n    })\n\n    // Transfers\n    this.app.post(this.baseAddress + '/transfers', this._handleTransferPostRequest.bind(this))\n    this.app.put(this.baseAddress + '/transfers/:transferId', this._handleTransferPutRequest.bind(this))\n    this.app.put(this.baseAddress + '/transfers/:transferId/error', this._handleTransferErrorPutRequest.bind(this))\n\n    // Quotes\n    this.app.post(this.baseAddress + '/quotes', this._handleQuotePostRequest.bind(this))\n    this.app.put(this.baseAddress + '/quotes/:quoteId', this._handleQuotePutRequest.bind(this))\n\n    this.server = this.app.listen(this.port, this.host)\n\n    this._log.info(`listening for requests connections on ${this.server.address()}. port=${this.port}, host=${this.host}`)\n\n    this._readyState = ReadyState.READY_TO_EMIT\n    this._emitConnect()\n  }\n\n  /**\n   * Close client/server and emit disconnect.\n   *\n   * **Important**: calls `this_disconnect` which is meant to be overriden by\n   * plugins that extend BTP to add additional (e.g. ledger) functionality on\n   * disconnect.\n   */\n  async disconnect () {\n    this._emitDisconnect()\n\n    if (this.server) {\n      this.server.close()\n    }\n  }\n\n  isConnected () {\n    return this._readyState === ReadyState.CONNECTED\n  }\n\n  async _handleTransferErrorRequest (request: express.Request, response: express.Response) {\n    console.log(\"received transfer error. transferId=\", request.params.transfer_id)\n    console.log(\"headers\", request.headers)\n    console.log(\"body\", request.body)\n  }\n\n  /**\n   * Convert incoming http request into ilpPacket then forward onto connector.\n   * Return a 202 to sender if packet was successfully forwarded, 422 if not.\n   */\n  private async _handleTransferPostRequest (request: express.Request, response: express.Response) {\n    try {\n      this._log.info(`received request transfer. headers=${JSON.stringify(request.headers)}, body=${JSON.stringify(request.body)},  amount=${request.body.amount}`)\n      const { amount, expiration, condition, transferId } = request.body\n\n      const ilpMojaData = {\n        requestType: MessageType.transfer,\n        uniqueId: transferId,\n        requestBody: request.body,\n        requestHeaders: request.headers\n      }\n\n      const ilpPrepare = {\n        amount: amount.amount,\n        expiresAt: new Date(expiration),\n        destination: request.headers['fspiop-final-destination'] ? request.headers['fspiop-final-destination'] : request.headers['fspiop-destination'],\n        data: Buffer.from(JSON.stringify(ilpMojaData)),\n        executionCondition: Buffer.from(condition, 'base64')\n      } as IlpPrepare\n      response.status(202).end()\n\n      if (!this._dataHandler) {\n        this._log.error('No data handler defined.')\n        throw new Error('No data handler is defined.')\n      }\n\n      try {\n        const packet = await this._dataHandler(serializeIlpPrepare(ilpPrepare))\n        const ilpReply = deserializeIlpReply(packet)\n        const transferReply = JSON.parse(ilpReply.data.toString())\n\n        this._log.info(`sending put request to ${this.transfersEndpoint} for transferId=${transferId}`)\n        const headers = Object.assign({}, transferReply.requestHeaders, { 'fspiop-final-destination': request.headers['fspiop-source'] })\n        this.client.put(this.transfersEndpoint + '/transfers/' + transferId, transferReply.requestBody, { headers })\n      } catch (err) {\n        // TODO: check mojaloop api spec to see which endpoint rejects go to. Possibly need retry logic?\n        this._log.info(`Error in post transfer request. transferId=${transferId}, endpoint=${this.transfersEndpoint + '/transfers/' + transferId}`, err)\n      }\n    } catch (err) {\n      this._log.info(`Error in processing incoming transfer request`, err, request)\n      response.status(400).end(err.message)\n    }\n  }\n\n  /**\n   * Called after receiving a transfer put request. Emits event to resolve listener from _call. The headers received are encoded\n   * into the data section of the ilpFulfill\n   */\n  private async _handleTransferPutRequest (request: express.Request, response: express.Response) {\n    const transferId = request.params.transferId\n    this._log.info(`received fulfill transfer request. transferId=${transferId}`)\n    const requestBody = request.body\n\n    const ilpMojaData = {\n      requestType: MessageType.transfer,\n      uniqueId: transferId,\n      requestBody,\n      requestHeaders: {\n        'content-type': 'application/vnd.interoperability.transfers+json;version=1.0',\n        'fspiop-final-destination': request.headers['fspiop-final-destination'],\n        'fspiop-source': this.ilpAddress,\n        'date': request.headers['date']\n      }\n    }\n\n    const ilpFulfill = {\n      fulfillment: Buffer.from(requestBody.fulfilment, 'base64'),\n      data: Buffer.from(JSON.stringify(ilpMojaData))\n    } as IlpFulfill\n\n    this.emit('__callback_' + transferId, ilpFulfill)\n    response.status(202).end()\n  }\n\n  /**\n   * TODO: WIP. Issue is that an error won't a fulfillment but a reject. Need to understand how best to handle this case.\n   * Note: This will handle inflight error's but will not handle errors that are just required to be forwarded back to\n   * origin without an inflight transfer request.\n   */\n  private async _handleTransferErrorPutRequest (request: express.Request, response: express.Response) {\n    const transferId = request.params.transferId\n    this._log.info(`received error for transfer request. transferId=${transferId}`)\n\n    const ilpMojaData = {\n      requestType: MessageType.transferError,\n      uniqueId: transferId,\n      requestBody: request.body,\n      requestHeaders: {\n        'content-type': 'application/vnd.interoperability.transfers+json;version=1.0',\n        'fspiop-final-destination': request.headers['fspiop-final-destination'],\n        'fspiop-source': this.ilpAddress,\n        'date': request.headers['date']\n      }\n    }\n\n    const ilpFulfill = {\n      fulfillment: Buffer.from(ilpMojaData.requestBody.fulfilment, 'base64'),\n      data: Buffer.from(JSON.stringify(ilpMojaData))\n    } as IlpFulfill\n\n    this.emit('__callback_' + transferId, ilpFulfill)\n    response.status(202).end()\n  }\n\n  async _handleQuotePostRequest (request: express.Request, response: express.Response) {\n    try {\n      this._log.info(`received request quotes. headers=${JSON.stringify(request.headers)}, body=${JSON.stringify(request.body)}`)\n      const { amount, quoteId } = request.body\n\n      const ilpMojaData = {\n        requestType: MessageType.quote,\n        uniqueId: quoteId,\n        requestBody: request.body,\n        requestHeaders: request.headers\n      }\n\n      const ilpPrepare = {\n        amount: amount.amount,\n        expiresAt: new Date('2019-02-28'),\n        destination: request.headers['fspiop-final-destination'] ? request.headers['fspiop-final-destination'] : request.headers['fspiop-destination'],\n        data: Buffer.from(JSON.stringify(ilpMojaData)),\n        executionCondition: MOJA_QUOTE_PROTOCOL_CONDITION\n      } as IlpPrepare\n      response.status(202).end()\n\n      if (!this._dataHandler) {\n        this._log.error('No data handler defined.')\n        throw new Error('No data handler is defined.')\n      }\n\n      try {\n        const packet = await this._dataHandler(serializeIlpPrepare(ilpPrepare))\n        const ilpReply = deserializeIlpReply(packet)\n        const transferReply = JSON.parse(ilpReply.data.toString())\n\n        this._log.info(`sending put request to ${this.quotesEndpoint} for transferId=${quoteId}`)\n        const headers = Object.assign({}, transferReply.requestHeaders, { 'fspiop-final-destination': request.headers['fspiop-source'] })\n        this.client.put(this.quotesEndpoint + '/quotes/' + quoteId, transferReply.requestBody, { headers })\n      } catch (err) {\n        // TODO: check mojaloop api spec to see which endpoint rejects go to\n        const packet = err\n        console.log('ERROR:', err)\n      }\n\n    } catch (err) {\n      response.status(422).end(err.message)\n    }\n  }\n\n  async _handleQuotePutRequest (request: express.Request, response: express.Response) {\n    const quoteId = request.params.quoteId\n    this._log.info(`received fulfill quote request. quoteId=${quoteId}`)\n\n    const ilpMojaData = {\n      requestType: MessageType.quote,\n      uniqueId: quoteId,\n      requestBody: request.body,\n      requestHeaders: {\n        'content-type': 'application/vnd.interoperability.quotes+json;version=1.0',\n        'fspiop-final-destination': request.headers['fspiop-final-destination'],\n        'fspiop-source': this.ilpAddress,\n        'date': (new Date()).toUTCString()\n      }\n    }\n\n    const ilpFulfill = {\n      fulfillment: MOJA_QUOTE_PROTOCOL_FULFILLMENT,\n      data: Buffer.from(JSON.stringify(ilpMojaData))\n    } as IlpFulfill\n\n    this.emit('__callback_' + quoteId, ilpFulfill)\n    response.status(202).end()\n  }\n\n  /**\n   * Send data to counterparty. Uses `_call` which sets the listener for response packets received via /transfer/{transfer_id}\n   */\n  async sendData (buffer: Buffer): Promise<Buffer> {\n    const response = await this._call(deserializeIlpPrepare(buffer))\n    return serializeIlpReply(response)\n  }\n\n  registerMoneyHandler (handler: MoneyHandler) {\n    if (this._moneyHandler) {\n      throw new Error('requestHandler is already registered')\n    }\n\n    // TODO Is this check required? TypeScript's linter suggests not\n    // tslint:disable-next-line:strict-type-predicates\n    if (typeof handler !== 'function') {\n      throw new Error('requestHandler must be a function')\n    }\n\n    this._log.trace('registering money handler')\n    this._moneyHandler = handler\n  }\n\n  deregisterMoneyHandler () {\n    this._moneyHandler = undefined\n  }\n\n  /**\n   * With no underlying ledger, sendMoney is a no-op.\n   */\n  async sendMoney (amount: string): Promise<void> {\n    /* NO OP */\n  }\n\n  /**\n   * Don't throw errors even if the event handler throws\n   * this is especially important in plugins because\n   * errors can prevent the balance from being updated correctly.\n   */\n  _safeEmit () {\n    try {\n      this.emit.apply(this, arguments)\n    } catch (err) {\n      const errInfo = (typeof err === 'object' && err.stack) ? err.stack : String(err)\n      this._log.error('error in handler for event', arguments, errInfo)\n    }\n  }\n\n  registerDataHandler (handler: DataHandler) {\n    if (this._dataHandler) {\n      throw new Error('requestHandler is already registered')\n    }\n\n    // TODO Is this check required? TypeScript's linter suggests not\n    // tslint:disable-next-line:strict-type-predicates\n    if (typeof handler !== 'function') {\n      throw new Error('requestHandler must be a function')\n    }\n\n    this._log.trace('registering data handler')\n    this._dataHandler = handler\n  }\n\n  deregisterDataHandler () {\n    this._dataHandler = undefined\n  }\n\n  /**\n   * Create a listener for a put /transfer/{transfer_id} request. Listener create Send IlpPacket\n   */\n  protected async _call (packet: IlpPrepare): Promise<IlpReply> {\n    // TODO not general to all ilpPrepares. e.g. route control.\n    const uniqueId = JSON.parse(packet.data.toString()).uniqueId\n\n    let callback: Listener\n    const response = new Promise<IlpReply>((resolve, reject) => {\n      callback = (packet: IlpReply) => isFulfill(packet) ? resolve(packet) : reject(packet)\n      this.once('__callback_' + uniqueId, callback)\n    })\n\n    await this._postIlpPrepare(packet)\n    return response\n  }\n\n  /**\n   * Converts given IlpPrepare packet into Moja packet and posts it to the given endpoint.\n   */\n  protected async _postIlpPrepare (packet: IlpPrepare, requestId?: string) {\n\n    this._log.trace(`posting prepare request to for requestId=${requestId} packet=${JSON.stringify(packet)}`)\n\n    // TODO needs to handle various request types\n    try {\n      const packetData = JSON.parse(packet.data.toString())\n      let transferRequest = packetData.requestBody\n      let headers = null\n      switch (packetData.requestType) {\n        case(MessageType.transfer):\n          transferRequest.payerFsp = this.ilpAddress\n          transferRequest.payeeFsp = packet.destination\n          headers = {\n            'fspiop-final-destination': packet.destination,\n            'fspiop-source': this.ilpAddress,\n            'accept': 'application/vnd.interoperability.transfers+json;version=1.0',\n            'content-type': 'application/vnd.interoperability.transfers+json;version=1.0',\n            'date': packetData.requestHeaders['date']\n          }\n\n          this._log.info('posting transfer to endpoint:', this.endpoint, 'headers', headers,'transfer request:', transferRequest)\n          this.client.post(this.endpoint + '/transfers', transferRequest, { headers }).catch((err: any) => console.log(err))\n          break\n        case(MessageType.quote):\n          transferRequest.payerFsp = this.ilpAddress\n          transferRequest.payeeFsp = packet.destination\n          headers = {\n            'fspiop-final-destination': packet.destination,\n            'fspiop-source': this.ilpAddress,\n            'accept': 'application/vnd.interoperability.quotes+json;version=1.0',\n            'content-type': 'application/vnd.interoperability.quotes+json;version=1.0',\n            'date': packetData.requestHeaders['date']\n          }\n\n          this._log.info('posting quote to endpoint:', this.quotesEndpoint, 'headers', headers,'transfer request:', transferRequest)\n          this.client.post(this.quotesEndpoint + '/quotes', transferRequest, { headers }).catch((err: any) => console.log(err))\n          break\n        default:\n          this._log.error('Unable to forward request for type ', packetData.requestType)\n      }\n\n    } catch (e) {\n      this._log.error('unable to send http message to client: ' + e.message, 'packet:', JSON.stringify(packet))\n    }\n  }\n\n  /**\n   * If the instance is not already disconnected, change the ReadyState and\n   * emit a disconnect event.\n   */\n  private _emitDisconnect () {\n    if (this._readyState !== ReadyState.DISCONNECTED) {\n      this._readyState = ReadyState.DISCONNECTED\n      this.emit('disconnect')\n    }\n  }\n\n  /**\n   * If the ReadyState is CONNECTING it implies a first time connect, so\n   * accordingly emit that message. Otherwise if the instance has already\n   * registered listeners (i.e. connected before) and is in the appropriate\n   * ready state then emit a normal 'connect' event.\n   */\n  private _emitConnect () {\n    if (this._readyState === ReadyState.CONNECTING) {\n      this.emit('_first_time_connect')\n    } else if (this._readyState === ReadyState.READY_TO_EMIT || this._readyState === ReadyState.DISCONNECTED) {\n      this._readyState = ReadyState.CONNECTED\n      this.emit('connect')\n    }\n  }\n}\n"]}